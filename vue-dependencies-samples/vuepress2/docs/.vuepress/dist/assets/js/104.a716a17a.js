(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{438:function(e,n,t){"use strict";t.r(n);var a=t(56),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_6-1-rtcpeerconnection-接口扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-rtcpeerconnection-接口扩展"}},[e._v("#")]),e._v(" 6.1 RTCPeerConnection 接口扩展")]),e._v(" "),t("p",[e._v("对等数据API对RTCPeerConnection接口的扩展如下。")]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("partial "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RTCPeerConnection")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    readonly        attribute "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RTCSctpTransport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" sctp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RTCDataChannel")]),e._v(" createDataChannel "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("USVString")]),e._v(" label"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" optional "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RTCDataChannelInit")]),e._v(" dataChannelDict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n                    attribute "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("EventHandler")]),e._v("      ondatachannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[t("strong",[e._v("属性")])]),e._v(" "),t("p",[t("code",[e._v("RTCSctpTransport")]),e._v("类型的"),t("code",[e._v("sctp")]),e._v("，只读，可以为null,"),t("a",{attrs:{href:"https://github.com/web-platform-tests/wpt/blob/master/webrtc/RTCIceTransport.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试"),t("OutboundLink")],1),e._v("：SCTP数据通过SCTP传输发送和接收。如果SCTP还未经过协商，值为null。此属性必须返回存储在[SctpTransport]内部插槽的"),t("code",[e._v("RTCSctpTransport")]),e._v("对象。")]),e._v(" "),t("p",[t("code",[e._v("EventHandler")]),e._v("类型的"),t("code",[e._v("ondatachannel")]),e._v(","),t("a",{attrs:{href:"https://github.com/web-platform-tests/wpt/blob/master/webrtc/RTCPeerConnection-ondatachannel.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试"),t("OutboundLink")],1),e._v("：此event handler的事件类型是"),t("code",[e._v("datachannel")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("方法")])]),e._v(" "),t("p",[t("code",[e._v("createDataChannel")])]),e._v(" "),t("p",[e._v("以给定标签创建一个新的"),t("code",[e._v("RTCDataChannel")]),e._v("对象。"),t("code",[e._v("RTCDataChannelInit")]),e._v("字典可以被用来配置底层通道属性，例如数据可靠性。")]),e._v(" "),t("p",[e._v("当"),t("code",[e._v("createDataChannel")]),e._v("方法被调用时，用户代理必须运行下列步骤。")]),e._v(" "),t("p",[e._v("1.让"),t("code",[e._v("connection")]),e._v("成为用来调用方法的"),t("code",[e._v("RTCPeerConnection")]),e._v("对象。")]),e._v(" "),t("p",[e._v("2.如果"),t("code",[e._v("connection")]),e._v("的[IsClosed]插槽为"),t("code",[e._v("true")]),e._v("，抛出一个"),t("code",[e._v("InvalidStateError")]),e._v("。"),t("a",{attrs:{href:"https://github.com/web-platform-tests/wpt/blob/master/webrtc/RTCPeerConnection-createDataChannel.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("3.创建一个"),t("code",[e._v("RTCDataChannel")]),e._v(",channel。")]),e._v(" "),t("p",[e._v("4.初始化channel的[DataChannelLable]插槽为第一个参数的值。")]),e._v(" "),t("p",[e._v("5.如果[DataChannelLabel]长度大于65535bytes,抛出"),t("code",[e._v("TypeError")]),e._v("。")]),e._v(" "),t("p",[e._v("6.让options成为第二个参数。")]),e._v(" "),t("p",[e._v("7.初始化channels的[MaxPacketLifeTime]插槽为option的"),t("code",[e._v("maxPacketLifeTime")]),e._v("成员，如果存在，否则为"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("8.初始化channel的[MaxRetransmits]插槽为option的"),t("code",[e._v("maxRetransmits")]),e._v("成员，如果存在，否则为"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("9.初始化channel的[Ordered]插槽为option的"),t("code",[e._v("ordered")]),e._v("成员。")]),e._v(" "),t("p",[e._v("10.初始化channel的[DataChannelProtocol]插槽为option的"),t("code",[e._v("protocol")]),e._v("成员。")]),e._v(" "),t("p",[e._v("11.如果[DataChannelProtocol]长度大于65535bytes，抛出"),t("code",[e._v("TypeError")]),e._v("。")]),e._v(" "),t("p",[e._v("12.初始化channel的[Negotiated]插槽为option的"),t("code",[e._v("negotiated")]),e._v("成员。")]),e._v(" "),t("p",[e._v("13.初始化channel的[DataChannelId]插槽为option的"),t("code",[e._v("id")]),e._v("成员的值，如果存在并且[Negotiated]为"),t("code",[e._v("true")]),e._v("，否则为"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("blockquote",[t("p",[e._v("NOTE:这意味着如果数据通道在带内协商，id成员将会被忽略。这是有意的。数据通道带内协商应该基于DTLS角色选择ID，如[RTCWEB-DATA-PROTOCOL]中所述。")])]),e._v(" "),t("p",[e._v("14.如果[Negotiated]为"),t("code",[e._v("true")]),e._v("，并且[DataChannelId]为"),t("code",[e._v("null")]),e._v("，抛出"),t("code",[e._v("TypeError")]),e._v("。")]),e._v(" "),t("p",[e._v("15.初始化channel的[DATAChannelPriority]插槽为option的"),t("code",[e._v("priority")]),e._v("成员。")]),e._v(" "),t("p",[e._v("16.如果[MaxPacketLifeTime]和[MaxRetransmits]属性都被设置(不为null)，抛出"),t("code",[e._v("TypeError")]),e._v("。")]),e._v(" "),t("p",[e._v("17.如果一个设置，或是[MaxPacketLifeTime],或是[MaxRetransmits]已经被设置用来表示不可靠模式，并且它的值超过了用户代理支持的最大值，此数值必须被设置为用户代理最大值。")]),e._v(" "),t("p",[e._v("18.如果[DataChannelId]等于65535，比最大允许ID65534长，但是仍然是无符号short值，抛出"),t("code",[e._v("TypeError")]),e._v("。")]),e._v(" "),t("p",[e._v("19.如果[DataChannelId]插槽为"),t("code",[e._v("null")]),e._v("（由于没有ID被传入"),t("code",[e._v("createDataChannel")]),e._v("，或者[Negotiated]为false)，并且SCTP传输DTLS角色已经协商，则初始化[DataChannelId]为用户代理生成的值，根据[RTCWEB-DATA-PROTOCOL]，并且跳过下列步骤。如果不能生成可用ID，或者[DataChannelId]插槽的值被现存"),t("code",[e._v("RTCDataChannel")]),e._v("使用，抛出"),t("code",[e._v("OperationError")]),e._v("异常。")]),e._v(" "),t("blockquote",[t("p",[e._v("NOTE:如果在此步骤之后[DataChannelId]插槽为"),t("code",[e._v("null")]),e._v("，则在设置"),t("code",[e._v("RTCSessionDescription")]),e._v("的过程中确定DTLS角色后，将填充该插槽。")])]),e._v(" "),t("p",[e._v("20.让transport成为connection的[SctpTransport]插槽。如果[DataChannelId]插槽为"),t("code",[e._v("null")]),e._v("，transport处于"),t("code",[e._v("connected")]),e._v("状态，并且[DataChannelId]大于等于transport的[MaxChannels]插槽，抛出"),t("code",[e._v("OperationError")]),e._v("。")]),e._v(" "),t("p",[e._v("21.如果channel是在connection上创建的第一个"),t("code",[e._v("RTCDataChannel")]),e._v("，更新negotiation-needed标记。")]),e._v(" "),t("p",[e._v("22.返回channel并且继续并行执行下列步骤。")]),e._v(" "),t("p",[e._v("23.创建channel的关联底层数据传输，并且根据相关channel属性配置。")])])}),[],!1,null,null,null);n.default=o.exports}}]);