(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{431:function(e,t,n){"use strict";n.r(t);var v=n(56),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_7-2-rtcdtmfsender"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-rtcdtmfsender"}},[e._v("#")]),e._v(" 7.2 RTCDTMFSender")]),e._v(" "),n("p",[e._v("为了创建RTCDTMFSender，用户代理必须运行以下步骤：")]),e._v(" "),n("ol",[n("li",[e._v("让dtmf成为最新创建的"),n("code",[e._v("RTCDTMFSender")]),e._v("对象。")]),e._v(" "),n("li",[e._v("让dtmf具有[Duration]内部插槽。")]),e._v(" "),n("li",[e._v("让dtmf具有[InterToneGap]内部插槽。")]),e._v(" "),n("li",[e._v("让dtmf具有[ToneBuffer]内部插槽。")])]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Exposed")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Window")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RTCDTMFSender")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("EventTarget")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" insertDTMF "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("DOMString")]),e._v(" tones"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" optional unsigned "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("long")]),e._v(" duration "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" optional unsigned "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("long")]),e._v(" interToneGap "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("70")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n                    attribute "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("EventHandler")]),e._v(" ontonechange"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    readonly        attribute "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v("      canInsertDTMF"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    readonly        attribute "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("DOMString")]),e._v("    toneBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[n("strong",[e._v("属性")])]),e._v(" "),n("p",[e._v("事件处理程序类型的"),n("code",[e._v("ontonechange")]),e._v(":此事件处理程序的事件类型时候tonechange。"),n("a",{attrs:{href:"https://github.com/web-platform-tests/wpt/blob/master/webrtc/RTCDTMFSender-ontonechange-long.https.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试1"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("boolean类型的"),n("code",[e._v("canInsertDTMF")]),e._v(",只读：不管"),n("code",[e._v("RTCDTMFSender")]),e._v(" dtmfSender是否能发送DTMF。当获取时，用户代理必须返回结果，确定是否可以为dtmfSender发送DTMF。")]),e._v(" "),n("p",[e._v("DOMString类型的"),n("code",[e._v("toneBuffer")]),e._v("，只读："),n("code",[e._v("toneBuffer")]),e._v("属性必须返回剩余需要播放的tone列表。关于此列表的语法，内容，解释，查看"),n("code",[e._v("insertDTMF")]),e._v("。")]),e._v(" "),n("p",[n("strong",[e._v("方法")])]),e._v(" "),n("p",[n("code",[e._v("insertDTMF")]),e._v("："),n("code",[e._v("RTCDTMFSender")]),e._v("对象的"),n("code",[e._v("insertDTMF")]),e._v("方法用于发送DTMF音调。")]),e._v(" "),n("p",[e._v("tone参数被视为一系列字符。字符0到9，A到D，"),n("code",[e._v("#")]),e._v("和"),n("code",[e._v("*")]),e._v("生成相关的DTMF音调。字符a到d必须在输入时标准化为大写，并且等同于A到D.如[RTCWEB-AUDIO]第3节所述，需要支持字符0到9，A到D，＃和*。必须支持字符'，'，并指示在处理tone参数中的下一个字符之前的2秒延迟。所有其他字符（以及仅其他字符）必须被视为无法识别。"),n("a",{attrs:{href:"https://github.com/web-platform-tests/wpt/blob/master/webrtc/RTCDTMFSender-insertDTMF.https.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试1"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("持续时间参数指示用于在音调参数中传递的每个字符的持续时间（以毫秒为单位）。持续时间不能超过6000毫秒或小于40毫秒。每种音调的默认持续时间为100 ms。")]),e._v(" "),n("p",[e._v("interToneGap参数表示以ms为单位的音调间隙。用户代理将其钳位至少30毫秒，最多6000毫秒。默认值为70毫秒。")]),e._v(" "),n("p",[e._v("浏览器可以增加持续时间和interToneGap时间，以使DTMF开始和停止的时间与RTP数据包的边界对齐，但它不能增加它们中的任何一个超过单个RTP音频数据包的持续时间。")]),e._v(" "),n("p",[e._v("当调用"),n("code",[e._v("insertDTMF（)")]),e._v("方法时，用户代理必须运行以下步骤：")]),e._v(" "),n("ol",[n("li",[e._v("让sender成为用来发送DTMF的"),n("code",[e._v("RTCRtpSender")]),e._v("。")]),e._v(" "),n("li",[e._v("让transceiver成为与sender关联的"),n("code",[e._v("RTCRtpTransceiver")]),e._v("对象。")]),e._v(" "),n("li",[e._v("如果transceiver的[Stopped]插槽为"),n("code",[e._v("true")]),e._v("，抛出"),n("code",[e._v("InvalidStateError")]),e._v("。")]),e._v(" "),n("li",[e._v("如果transceiver的[CurrentDirection]插槽为"),n("code",[e._v("recvonly")]),e._v("或者"),n("code",[e._v("inactive")]),e._v("，抛出"),n("code",[e._v("InvalidStateError")]),e._v("。")]),e._v(" "),n("li",[e._v("让dtmf成为与sender关联的"),n("code",[e._v("RTCDTMFSender")]),e._v("对象。")]),e._v(" "),n("li",[e._v("如果决定是否可以为drmf发送DTMF返回"),n("code",[e._v("false")]),e._v("，抛出"),n("code",[e._v("InvalidStateError")]),e._v("。")]),e._v(" "),n("li",[e._v("让tones成为方法的第一个参数。")]),e._v(" "),n("li",[e._v("如果tones包含任意未识别的字符，抛出"),n("code",[e._v("InvalidCharacterError")]),e._v("。")]),e._v(" "),n("li",[e._v("设置对象的[ToneBuffer]插槽为tones。")]),e._v(" "),n("li",[e._v("设置dtmf的[Duration]插槽为"),n("code",[e._v("duration")]),e._v("参数的值。")]),e._v(" "),n("li",[e._v("设置dtmf的[InterToneGap]插槽为"),n("code",[e._v("interToneGap")]),e._v("参数的值。")]),e._v(" "),n("li",[e._v("如果"),n("code",[e._v("duration")]),e._v("参数的值小于40毫秒，设置dtmf的[Duration]插槽为40毫秒。")]),e._v(" "),n("li",[e._v("如果"),n("code",[e._v("duration")]),e._v("参数的值大于6000 ms，请将dtmf的[[Duration]]插槽设置为6000 ms。")]),e._v(" "),n("li",[e._v("如果"),n("code",[e._v("interToneGap")]),e._v("参数的值小于30 ms，则将dtmf的[[InterToneGap]]插槽设置为30 ms。")]),e._v(" "),n("li",[e._v("如果"),n("code",[e._v("interToneGap")]),e._v("参数的值大于6000 ms，请将dtmf的[[InterToneGap]]插槽设置为6000 ms。")]),e._v(" "),n("li",[e._v("如果[[ToneBuffer]]插槽为空字符串，则中止这些步骤。")]),e._v(" "),n("li",[e._v("如果计划运行Playout任务，则中止这些步骤;否则运行以下步骤的任务排队（播出任务）：\n"),n("ol",[n("li",[e._v("如果收发器的[[Stopped]]插槽为真，则中止这些步骤。")]),e._v(" "),n("li",[e._v("如果收发器的[[CurrentDirection]]插槽是"),n("code",[e._v("recvonly")]),e._v("或"),n("code",[e._v("inactive")]),e._v("，则中止这些步骤。")]),e._v(" "),n("li",[e._v("如果[[ToneBuffer]]槽包含空字符串，则使用RTCDTMFToneChangeEvent接口触发名为"),n("code",[e._v("tonechange")]),e._v("的事件，并将"),n("code",[e._v("tone")]),e._v("属性设置为RTCDTMFSender对象的空字符串并中止这些步骤。")]),e._v(" "),n("li",[e._v("从[[ToneBuffer]]插槽中删除第一个字符，然后让该字符变为tone。")]),e._v(" "),n("li",[e._v("如果音调是“，”延迟在相关的RTP媒体流上发送tones 2000毫秒，并为2000毫秒后开始执行的任务排队，此任务运行标记为播出任务的步骤。")]),e._v(" "),n("li",[e._v("如果音调不是“，”使用适当的编解码器在相关的RTP媒体流上开始播放[[持续时间]] ms的音调，然后将要在[[持续时间]] + [[InterToneGap]] ms中执行的任务排队，此任务运行标记为播出任务的步骤。")]),e._v(" "),n("li",[e._v("使用"),n("code",[e._v("RTCDTMFToneChangeEvent")]),e._v("接口触发名为"),n("code",[e._v("tonechange")]),e._v("的事件，并将"),n("code",[e._v("tone")]),e._v("属性设置为"),n("code",[e._v("RTCDTMFSender")]),e._v("对象的tone。")])])])]),e._v(" "),n("p",[e._v("由于"),n("code",[e._v("insertDTMF")]),e._v("替换了音调缓冲区，为了添加正在播放的DTMF音调，必须使用包含剩余音调（存储在[[ToneBuffer]]插槽中）和附加在一起的新音调的字符串调用"),n("code",[e._v("insertDTMF")]),e._v("。使用空音调参数调用"),n("code",[e._v("insertDTMF")]),e._v("可用于取消在当前播放音调之后排队等待播放的所有音调。")])])}),[],!1,null,null,null);t.default=r.exports}}]);