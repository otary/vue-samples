(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{420:function(t,e,a){"use strict";a.r(e);var i=a(56),r=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_9-2-媒体流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-媒体流"}},[t._v("#")]),t._v(" 9.2 媒体流")]),t._v(" "),a("h3",{attrs:{id:"_9-2-1-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-1-id"}},[t._v("#")]),t._v(" 9.2.1 id")]),t._v(" "),a("p",[a("code",[t._v("MediaStream")]),t._v("指定的id属性返回了对流唯一的id，这样"),a("code",[t._v("RTCPeerConnection API")]),t._v("的远程端就可以识别媒体流。")]),t._v(" "),a("p",[t._v("当媒体流被创建用来表示从远程对等体获得的流时，id属性是通过远程源提供的信息初始化的。")]),t._v(" "),a("blockquote",[a("p",[t._v("NOTE:MediaStream对象的id对于流的源是唯一的，但这并不意味着不可能以重复项结束。例如，本地生成的流的轨道可以使用"),a("code",[t._v("RTCPeerConnection")]),t._v("从一个用户代理发送到远程对等体，然后以相同的方式发送回原始用户代理，在这种情况下，原始用户代理将得到具有相同id的多条流（本地生成的id和从远程对等体发送的id）。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);