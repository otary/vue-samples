(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{419:function(t,e,n){"use strict";n.r(e);var s=n(56),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_8-2-rtcpeerconnection接口扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-rtcpeerconnection接口扩展"}},[t._v("#")]),t._v(" 8.2 RTCPeerConnection接口扩展")]),t._v(" "),n("p",[t._v("统计API对RTCPeerConnection接口的扩展如下。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("partial "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RTCPeerConnection")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RTCStatsReport")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" getStats "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("optional "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MediaStreamTrack")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" selector "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    attribute "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventHandler")]),t._v(" onstatsended"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("strong",[t._v("属性")])]),t._v(" "),n("p",[t._v("事件处理程序类型的"),n("code",[t._v("onstatsended")]),t._v(":")]),t._v(" "),n("p",[t._v("此事件处理程序的事件类型是"),n("code",[t._v("statsended")]),t._v("。")]),t._v(" "),n("p",[t._v("为了删除与一个"),n("code",[t._v("RTCPeerConnection")]),t._v("，connection相关联的一系列被监控对象的统计信息，用户代理必须并行运行以下步骤：")]),t._v(" "),n("ol",[n("li",[t._v("收集将要删除的一系列被监控对象的统计信息。这些信息必须代表删除时的最终值。这些信息不能出现在接下来对getStats()的调用中。")]),t._v(" "),n("li",[t._v("对运行以下步骤的任务进行排队：\n"),n("ol",[n("li",[t._v("让report成为新的"),n("code",[t._v("RTCStatsReport")]),t._v("对象。")]),t._v(" "),n("li",[t._v("对于每个受监视对象，使用上面针对该受监视对象收集的统计信息创建新的相关统计信息对象对象，并将其添加到报告中。")]),t._v(" "),n("li",[t._v("使用"),n("code",[t._v("RTCStatsEvent")]),t._v("接口发起一个名为"),n("code",[t._v("statsended")]),t._v("的事件，在connection将"),n("code",[t._v("report")]),t._v("属性设置为report。")])])])]),t._v(" "),n("p",[n("strong",[t._v("方法")])]),t._v(" "),n("p",[n("code",[t._v("getStats")])]),t._v(" "),n("p",[t._v("收集给定选择器的统计信息并异步报告结果。")]),t._v(" "),n("p",[t._v("当调用"),n("code",[t._v("getStats（）")]),t._v("方法时，用户代理必须运行以下步骤：")]),t._v(" "),n("ol",[n("li",[t._v("让selectorArg成为方法的第一个参数。")]),t._v(" "),n("li",[t._v("让connection成为调用方法的"),n("code",[t._v("RTCPeerConnection")]),t._v("对象。")]),t._v(" "),n("li",[t._v("如果selectorArg为"),n("code",[t._v("null")]),t._v("，则让selector为"),n("code",[t._v("null")]),t._v("。")]),t._v(" "),n("li",[t._v("如果selectorArg是MediaStreamTrack，让选择器成为connection上的"),n("code",[t._v("RTCRtpSender")]),t._v("或"),n("code",[t._v("RTCRtpReceiver")]),t._v("，并且connection的"),n("code",[t._v("track")]),t._v("成员匹配selectorArg。如果不存在此类发件人或收件人，或者如果多个发件人或收件人符合此条件，则返回承诺，拒绝条件是新创建"),n("code",[t._v("InvalidAccessError")]),t._v("。")]),t._v(" "),n("li",[t._v("让p成为新的承诺。")]),t._v(" "),n("li",[t._v("并行运行以下步骤：\n"),n("ol",[n("li",[t._v("根据统计选择算法收集选择器指示的统计数据。")]),t._v(" "),n("li",[t._v("使用生成的"),n("code",[t._v("RTCStatsReport")]),t._v("对象解析p，其中包含收集的统计信息。")])])]),t._v(" "),n("li",[t._v("返回p。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);