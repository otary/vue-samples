(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{504:function(e,t,n){"use strict";n.r(t);var r=n(56),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"_4-4-1-操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-操作"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"http://w3c.github.io/webrtc-pc/#operation",target:"_blank",rel:"noopener noreferrer"}},[e._v("4.4.1 操作"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("调用new RTCPeerConnection（configuration）会创建RTCPeerConnection对象。")]),e._v(" "),n("p",[e._v("configuration.servers 包含 ICE 用于查找和访问服务器的信息。应用程序可以提供同种类的服务器的多个实例，并且任何TURN服务器也可以用作STUN服务器，以便收集服务器自反候选者。")]),e._v(" "),n("p",[e._v("RTCPeerConnection对象具有信令状态，连接状态，ICE收集状态和ICE连接状态。这些状态在创建对象时被初始化。")]),e._v(" "),n("p",[e._v("RTCPeerConnection的ICE协议实现用 ICE 代理[ICE]表示。某些RTCPeerConnection方法涉及与 ICE 代理 的交互被命名为：addIceCandidate，setConfiguration，setLocalDescription，setRemoteDescription和close。这些交互在本文档和[JSEP]的相关章节中进行了描述。当 RTCIceTransport 的内部表示状态发生变化时，ICE 代理还向用户代理提供指示，如5.6 RTCIceTransport接口中所述。")]),e._v(" "),n("p",[e._v("本节中列出的任务的任务源是网络任务源。")])])}),[],!1,null,null,null);t.default=o.exports}}]);